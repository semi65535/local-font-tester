{"version":3,"sources":["Fonts.ts","App.tsx","index.tsx"],"names":["fontFamilies","FontFaceList","fonts","this","font","some","_font","family","Util","fontFamilyName","FontFace","trim","load","then","status","App","useState","inputFont","setInputFont","inputFontFace","setInputFontFace","inputText","setInputText","testFontList","setTestFontList","installedFontList","setInstalledFontList","useEffect","canceled","a","loadLocalFont","contains","document","add","Promise","all","map","installedFonts","sampleText","textInput","className","type","value","onChange","e","target","placeholder","fontInput","addButton","onClick","input","state","fontStyle","fontFamily","displayFontStatus","style","list","toArray","forEach","index","push","key","substring","FontListElements","FontTableElement","href","ReactDOM","render","getElementById","color","textAlign"],"mappings":"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","file":"static/js/main.2923d47b.chunk.js","sourcesContent":["const fontFamilies = [\n    'Arial',\n    'Roboto',\n    'Palatino Linotype',\n    'Book Antiqua',\n    'Palatino',\n    'Times New Roman',\n    'Times Roman',\n    'Times',\n    'Helvetica',\n    'Arial Black',\n    'Gadget',\n    'Comic Sans MS',\n    'Apple Chancery',\n    'Papyrus',\n    'Impact',\n    'Charcoal',\n    'Lucida Sans Unicode',\n    'Lucida Grande',\n    'Tahoma',\n    'Geneva',\n    'TrebuchetMS',\n    'Verdana',\n    'Courier',\n    'Courier New',\n    'Lucida Console',\n    'Monaco',\n    'Osaka',\n    'Yu Gothic',\n    'Yu Gothic Medium',\n    'YuGo-Medium',\n    'Yu Mincho',\n    'Yu Mincho Regular',\n    'YuMin-Medium',\n    'YuKyo-Medium',\n    'Meiryo',\n    'MS PMincho',\n    'MS PGothic',\n    'mplus-2p-regular',\n    'HiraginoSans-W4',\n    'HiraMaruProN-W4',\n    'HiraMinProN-W3'\n];\n\nexport default fontFamilies","import React, { useState, useEffect } from 'react';\nimport fontFamilies from './Fonts';\nimport './App.scss';\n\nclass FontFaceList {\n  fonts: FontFace[];\n\n  constructor (fonts: FontFace[] = []) {\n    this.fonts = fonts;\n  }\n\n  contains (font: FontFace): Boolean {\n    return this.fonts.some((_font) => {\n      return _font.family === font.family;\n    });\n  }\n\n  toArray () {\n    return this.fonts;\n  }\n}\n\nclass Util {\n  static loadLocalFont (fontFamilyName:string) {\n    const font = new FontFace(`USERFONT-${fontFamilyName.trim()}`, `local(${fontFamilyName})`);\n    return font.load().then(() => font, () => font);\n  }\n\n  static displayFontStatus (font: FontFace|null): string {\n    if (font === null) {\n      return '';\n    }\n    if (font.status === 'loaded') {\n      return '●';\n    } else {\n      return '';\n    }\n  }\n}\n\nconst App = () => {\n  const [inputFont, setInputFont] = useState('');\n  const [inputFontFace, setInputFontFace] = useState<FontFace|null>(null);\n\n  const [inputText, setInputText] = useState('');\n\n  const [testFontList, setTestFontList] = useState(fontFamilies);\n\n  const [installedFontList, setInstalledFontList] = useState(new FontFaceList());\n\n  useEffect(() => {\n    let canceled = false;\n\n    (async () => {\n      const font = await Util.loadLocalFont(inputFont);\n      if (canceled) {\n        return;\n      }\n      if (font.status === 'loaded' && !installedFontList.contains(font)) {\n        document.fonts.add(font);\n      }\n      setInputFontFace(font);\n    })();\n\n    return () => {\n      canceled = true;\n    };\n  }, [installedFontList, inputFont]);\n\n  useEffect(() => {\n    let canceled = false;\n\n    (async () => {\n      const installedFonts = await Promise.all(testFontList.map((fontFamilyName) => {\n        return Util.loadLocalFont(fontFamilyName);\n      }));\n      if (!canceled) {\n        setInstalledFontList(new FontFaceList(installedFonts));\n      }\n    })();\n\n    return () => {\n      canceled = true;\n    };\n  }, [testFontList]);\n\n  const sampleText = (() => {\n    if (inputText === '') {\n      return 'sample text';\n    } else {\n      return inputText;\n    }\n  })();\n\n  const FontListElements = () => {\n    const list: JSX.Element[] = [];\n\n    installedFontList.toArray().forEach((font, index) => {\n      document.fonts.add(font);\n      list.push(\n        <tr key={index}>\n          <td className=\"column-font-family\" style={{fontFamily:font.family}}>{font.family.substring(9)}</td>\n          <td className=\"column-installed\">\n            {Util.displayFontStatus(font)}\n          </td>\n          <td className=\"column-sample-text\" style={{fontFamily:font.family}}>\n            {sampleText}\n          </td>\n        </tr>\n      );\n    });\n\n    return list;\n  };\n\n  const FontTableElement = () => {\n    const fontInputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setInputFont(e.target.value);\n    };\n    const fontInput = <input className=\"input is-small\" type=\"text\" value={inputFont} onChange={fontInputHandler} placeholder=\"Arial, Helvetica, etc...\"></input>;\n\n    const addButtonHandler = () => {\n      const input = inputFont.trim();\n      if (input === '') {\n        return;\n      }\n      setTestFontList((state) => {\n        return [input, ...state];\n      });\n    };\n    const addButton = <button className=\"button is-small is-info\" onClick={addButtonHandler}>Add</button>;\n\n    const fontStyle = (() => {\n      if (inputFontFace === null) {\n        return {};\n      }\n      return {fontFamily: inputFontFace.family};\n    })();\n\n    return (\n      <table className=\"table is-narrow is-fullwidth is-striped\">\n        <thead><tr><th>Font Family</th><th className=\"has-text-centered\">Installed</th><th>Sample</th></tr></thead>\n        <tbody>\n          <tr>\n            <td className=\"column-font-family\"><div className=\"field has-addons\"><div className=\"control\">{fontInput}</div><div className=\"control\">{addButton}</div></div></td>\n            <td className=\"column-installed\">{Util.displayFontStatus(inputFontFace)}</td>\n            <td className=\"column-sample-text\" style={fontStyle}>{sampleText}</td>\n          </tr>\n          {FontListElements()}\n        </tbody>\n      </table>\n    );\n  };\n\n  const textInputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputText(e.target.value);\n  };\n  const textInput = <input className=\"input text-input\" type=\"text\" value={inputText} onChange={textInputHandler} placeholder=\"sample text\"></input>;\n\n  return (\n    <div className=\"App\">\n      <header className=\"level\">\n        <div className=\"is-size-3 has-text-white has-text-weight-semibold\">\n          Local Font Tester\n        </div>\n        <div className=\"has-text-white\">\n          Sample Text\n          {textInput}\n        </div>\n      </header>\n      {FontTableElement()}\n      <footer className=\"has-text-centered\">\n        <a className=\"has-text-white\" href=\"https://github.com/semi65535/local-font-tester\">Github</a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nconst browserSupported = (() => {\n    return (typeof Promise !== 'undefined') && (typeof FontFace !== 'undefined');\n})();\n\nif (browserSupported) {\n    ReactDOM.render(<App />, document.getElementById('root'));\n} else {\n    ReactDOM.render(<div style={{color:'white',textAlign:'center'}}>Sorry your browser is not supported.</div>, document.getElementById('root'));\n}\n"],"sourceRoot":""}