{"version":3,"sources":["Fonts.ts","App.tsx","index.tsx"],"names":["fontFamilies","FontFaceList","fonts","this","length","font","some","_font","family","Util","fontFamilyName","FontFace","trim","load","then","status","FontRowElement","sampleText","installedText","fontLoaded","style","fontFamily","substring","className","FontTableElement","installedFontList","empty","toArray","map","index","key","FontInputElement","inputFont","setInputFont","inputFontFace","addUserFont","fontStyle","useMemo","installedTextClass","type","value","onChange","e","target","placeholder","onClick","App","useState","setInputFontFace","inputText","setInputText","setInstalledFontList","userInstalledFontList","setUserInstalledFontList","useEffect","canceled","a","loadLocalFont","contains","document","add","Promise","all","installedFonts","forEach","textInputHandler","useCallback","state","href","ReactDOM","render","getElementById","color","textAlign","textDecoration"],"mappings":"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","file":"static/js/main.76f54210.chunk.js","sourcesContent":["const fontFamilies = [\n    'Arial',\n    'Arial Black',\n    'Arial Narrow',\n    'Calibri',\n    'Candara',\n    'Century Gothic',\n    'Futura',\n    'Geneva',\n    'Gill Sans',\n    'Helvetica',\n    'Impact',\n    'Lucida Grande',\n    'Roboto',\n    'Optima',\n    'Segoe UI',\n    'Tahoma',\n    'TrebuchetMS',\n    'Verdana',\n\n    'Big Caslon',\n    'Book Antiqua',\n    'Cambria',\n    'Didot',\n    'Garamond',\n    'Georgia',\n    'Hoefler Text',\n    'Lucida Bright',\n    'Palatino',\n    'Palatino Linotype',\n    'Baskerville',\n    'Times New Roman',\n\n    'Apple Chancery',\n    'Brush Script MT',\n    'Charcoal',\n    'Comic Sans MS',\n    'Courier',\n    'Courier New',\n    'Copperplate',\n    'Gadget',\n    'Lucida Sans Unicode',\n    'Lucida Console',\n    'Monaco',\n    'Papyrus',\n];\n\nexport default fontFamilies","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport fontFamilies from './Fonts';\nimport './App.scss';\n\nclass FontFaceList {\n  fonts: FontFace[];\n\n  constructor (fonts: FontFace[] = []) {\n    this.fonts = fonts;\n  }\n\n  empty () {\n    return this.fonts.length === 0;\n  }\n\n  contains (font: FontFace) {\n    return this.fonts.some((_font) => {\n      return _font.family === font.family;\n    });\n  }\n\n  toArray () {\n    return this.fonts;\n  }\n}\n\nclass Util {\n  static loadLocalFont (fontFamilyName:string) {\n    const font = new FontFace(`USERFONT-${fontFamilyName.trim()}`, `local(${fontFamilyName})`);\n    return font.load().then(() => font, () => font);\n  }\n\n  static fontLoaded (font: FontFace|null) {\n    if (font === null) {\n      return false;\n    }\n    if (font.status === 'loaded') {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\ninterface FontRowElementProps {\n  font: FontFace,\n  sampleText: string\n}\n\nconst FontRowElement = ({font, sampleText}: FontRowElementProps) => {\n  let installedText = \"\";\n  if (Util.fontLoaded(font)) {\n    installedText = \"‚óè\";\n  }\n\n  return (\n    <tr>\n      <td style={{fontFamily:font.family}}>{font.family.substring(9)}</td>\n      <td className=\"column-installed\">\n        {installedText}\n      </td>\n      <td className=\"column-sample-text\" style={{fontFamily:font.family}}>\n        {sampleText}\n      </td>\n    </tr>\n  );\n};\n\ninterface FontTableElementProps {\n  installedFontList: FontFaceList,\n  sampleText: string\n}\n\nconst FontTableElement = ({installedFontList, sampleText}: FontTableElementProps) => {\n  if (installedFontList.empty()) {\n    return <></>;\n  }\n\n  return (\n    <table className=\"table is-narrow is-fullwidth is-striped\">\n      <thead><tr><th>Font Family</th><th className=\"has-text-centered\">Installed</th><th>Sample</th></tr></thead>\n      <tbody>\n        <>\n          {installedFontList.toArray().map((font, index) => \n            <FontRowElement key={index} font={font} sampleText={sampleText}/>\n          )}\n        </>\n      </tbody>\n    </table>\n  );\n};\n\ninterface FontInputElementProps {\n  inputFont: string,\n  setInputFont: React.Dispatch<React.SetStateAction<string>>,\n  inputFontFace: FontFace|null,\n  addUserFont: () => void,\n  sampleText: string\n}\n\nconst FontInputElement = ({inputFont, setInputFont, inputFontFace, addUserFont, sampleText}: FontInputElementProps) => {\n  const fontInputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputFont(e.target.value);\n  };\n\n  const fontStyle = useMemo(() => {\n    if (inputFontFace === null) {\n      return {};\n    }\n    return {fontFamily: inputFontFace.family};\n  }, [inputFontFace]);\n\n  let installedText = \"Not installed\";\n  let installedTextClass = \"has-text-danger\";\n  if (Util.fontLoaded(inputFontFace)) {\n    installedText = \"Installed\";\n    installedTextClass = \"has-text-success\";\n  }\n\n  return (\n    <div className=\"box\">\n      <div className=\"columns is-vcentered\">\n        <div className=\"column is-narrow\">\n          <div>Input font-family name</div>\n          <div className=\"field has-addons\">\n            <div className=\"control\">\n              <input className=\"input\" type=\"text\" value={inputFont} onChange={fontInputHandler} placeholder=\"Arial, Helvetica, etc...\"/>\n            </div>\n            <div className=\"control\">\n              <button className=\"button is-info\" onClick={addUserFont}>Add</button>\n            </div>\n          </div>\n        </div>\n        <div className={\"column\"}>\n          <div className={installedTextClass}>{installedText}</div>\n          <div className=\"is-size-5 user-sample-text\" style={fontStyle}>{sampleText}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [inputFont, setInputFont] = useState('');\n  const [inputFontFace, setInputFontFace] = useState<FontFace|null>(null);\n\n  const [inputText, setInputText] = useState('');\n\n  const [installedFontList, setInstalledFontList] = useState(new FontFaceList());\n  const [userInstalledFontList, setUserInstalledFontList] = useState(new FontFaceList());\n\n  const addUserFont = () => {\n    setUserInstalledFontList((state) => {\n      if (inputFontFace === null) {\n        return state;\n      }\n      return new FontFaceList([inputFontFace, ...state.toArray()]);\n    })\n  };\n\n  useEffect(() => {\n    let canceled = false;\n\n    (async () => {\n      const font = await Util.loadLocalFont(inputFont);\n      if (canceled) {\n        return;\n      }\n      if (font.status === 'loaded' && !installedFontList.contains(font) && !userInstalledFontList.contains(font)) {\n        document.fonts.add(font);\n      }\n      setInputFontFace(font);\n    })();\n\n    return () => {\n      canceled = true;\n    };\n  }, [inputFont]);\n\n  useEffect(() => {\n    (async () => {\n      const installedFonts = await Promise.all(fontFamilies.map((fontFamilyName) => {\n        return Util.loadLocalFont(fontFamilyName);\n      }));\n      installedFonts.forEach((font) => {\n        document.fonts.add(font);\n      });\n      setInstalledFontList(new FontFaceList(installedFonts));\n    })();\n  }, []);\n\n  const sampleText = useMemo(() => {\n    if (inputText === '') {\n      return 'sample text';\n    } else {\n      return inputText;\n    }\n  }, [inputText]);\n\n  const textInputHandler = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputText(e.target.value);\n  }, []);\n\n  return (\n    <div className=\"App container\">\n      <header className=\"level\">\n        <div className=\"is-size-3 has-text-white has-text-weight-semibold\">\n          Local Font Tester\n        </div>\n        <div className=\"has-text-white\">\n          Sample Text\n          <input className=\"input text-input\" type=\"text\" value={inputText} onChange={textInputHandler} placeholder=\"sample text\"></input>\n        </div>\n      </header>\n      <FontInputElement inputFont={inputFont} setInputFont={setInputFont} inputFontFace={inputFontFace} addUserFont={addUserFont} sampleText={sampleText}/>\n      <FontTableElement installedFontList={userInstalledFontList} sampleText={sampleText}/>\n      <div className=\"has-text-white\">Popular Fonts</div>\n      <FontTableElement installedFontList={installedFontList} sampleText={sampleText}/>\n      <footer className=\"has-text-centered\">\n        <a className=\"has-text-white\" href=\"https://github.com/semi65535/local-font-tester\">Github</a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nconst browserSupported = (() => {\n    return (typeof Promise !== 'undefined') && (typeof FontFace !== 'undefined');\n})();\n\nif (browserSupported) {\n    ReactDOM.render(<App />, document.getElementById('root'));\n} else {\n    ReactDOM.render(<div style={{color:'white',textAlign:'center'}}>Sorry your browser is not supported.<br/>More info - <a style={{color:'white',textDecoration:'underline'}} href=\"https://developer.mozilla.org/docs/Web/API/FontFace\">FontFace API</a></div>, document.getElementById('root'));\n}\n"],"sourceRoot":""}